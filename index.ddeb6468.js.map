{"mappings":"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","sources":["<anon>","src/modules/Game.class.js"],"sourcesContent":["/* eslint-disable function-paren-newline */ /* eslint-disable comma-dangle */ /* eslint-disable no-shadow */ \"use strict\";\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nvar Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        _class_call_check(this, Game);\n        this.initialState = initialState;\n        this.board = JSON.parse(JSON.stringify(initialState));\n        this.score = 0;\n        this.status = \"idle\"; // Possible values: 'idle', 'playing', 'win', 'lose'\n    }\n    _create_class(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                this.move(\"left\");\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                this.move(\"right\");\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                this.move(\"up\");\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                this.move(\"down\");\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.board = JSON.parse(JSON.stringify(this.initialState));\n                this.score = 0;\n                this.status = \"idle\";\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var row = 0; row < 4; row++){\n                    for(var col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                if (emptyCells.length === 0) return;\n                var _emptyCells_Math_floor = emptyCells[Math.floor(Math.random() * emptyCells.length)], row1 = _emptyCells_Math_floor.row, col1 = _emptyCells_Math_floor.col;\n                this.board[row1][col1] = Math.random() < 0.9 ? 2 : 4;\n            }\n        },\n        {\n            key: \"move\",\n            value: function move(direction) {\n                var originalBoard = JSON.parse(JSON.stringify(this.board));\n                switch(direction){\n                    case \"left\":\n                        this.board = this.moveLeftHelper(this.board);\n                        break;\n                    case \"right\":\n                        this.board = this.moveRightHelper(this.board);\n                        break;\n                    case \"up\":\n                        this.board = this.moveUpHelper(this.board);\n                        break;\n                    case \"down\":\n                        this.board = this.moveDownHelper(this.board);\n                        break;\n                    default:\n                        return;\n                }\n                // Check if board has changed\n                if (JSON.stringify(originalBoard) !== JSON.stringify(this.board)) {\n                    this.addRandomTile();\n                    if (this.checkWin()) this.status = \"win\";\n                    else if (this.checkGameOver()) this.status = \"lose\";\n                }\n            }\n        },\n        {\n            key: \"moveLeftHelper\",\n            value: function moveLeftHelper(board) {\n                var _this = this;\n                return board.map(function(row) {\n                    return _this.slideTiles(row);\n                });\n            }\n        },\n        {\n            key: \"moveRightHelper\",\n            value: function moveRightHelper(board) {\n                var _this = this;\n                return board.map(function(row) {\n                    return _this.slideTiles(row.reverse()).reverse();\n                });\n            }\n        },\n        {\n            key: \"moveUpHelper\",\n            value: function moveUpHelper(board) {\n                var _this = this;\n                var rotatedBoard = this.rotateBoard(board);\n                var movedBoard = rotatedBoard.map(function(row) {\n                    return _this.slideTiles(row);\n                });\n                return this.rotateBoard(movedBoard, true);\n            }\n        },\n        {\n            key: \"moveDownHelper\",\n            value: function moveDownHelper(board) {\n                var _this = this;\n                var rotatedBoard = this.rotateBoard(board, true);\n                var movedBoard = rotatedBoard.map(function(row) {\n                    return _this.slideTiles(row);\n                });\n                return this.rotateBoard(movedBoard);\n            }\n        },\n        {\n            key: \"slideTiles\",\n            value: function slideTiles(row) {\n                var newRow = row.filter(function(cell) {\n                    return cell !== 0;\n                });\n                for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                    newRow[i] *= 2;\n                    this.score += newRow[i];\n                    newRow.splice(i + 1, 1);\n                    newRow.push(0);\n                }\n                while(newRow.length < 4)newRow.push(0);\n                return newRow;\n            }\n        },\n        {\n            key: \"rotateBoard\",\n            value: function rotateBoard(board) {\n                var clockwise = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n                var rotated = board.map(function(row, rowIndex) {\n                    return row.map(function(val, colIndex) {\n                        return clockwise ? board[3 - colIndex][rowIndex] : board[colIndex][3 - rowIndex];\n                    });\n                });\n                return rotated;\n            }\n        },\n        {\n            key: \"checkWin\",\n            value: function checkWin() {\n                return this.board.some(function(row) {\n                    return row.includes(2048);\n                });\n            }\n        },\n        {\n            key: \"checkGameOver\",\n            value: function checkGameOver() {\n                var _this = this;\n                var directions = [\n                    \"left\",\n                    \"right\",\n                    \"up\",\n                    \"down\"\n                ];\n                return !directions.some(function(direction) {\n                    var tempGame = new Game(_this.board);\n                    tempGame.move(direction);\n                    return JSON.stringify(tempGame.board) !== JSON.stringify(_this.board);\n                });\n            }\n        }\n    ]);\n    return Game;\n}();\n// Export Game class for use in browser\nwindow.Game = Game;\n\n//# sourceMappingURL=index.ddeb6468.js.map\n","/* eslint-disable function-paren-newline */\n/* eslint-disable comma-dangle */\n/* eslint-disable no-shadow */\n'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.board = JSON.parse(JSON.stringify(initialState));\n    this.score = 0;\n    this.status = 'idle'; // Possible values: 'idle', 'playing', 'win', 'lose'\n  }\n\n  moveLeft() {\n    this.move('left');\n  }\n\n  moveRight() {\n    this.move('right');\n  }\n\n  moveUp() {\n    this.move('up');\n  }\n\n  moveDown() {\n    this.move('down');\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  restart() {\n    this.board = JSON.parse(JSON.stringify(this.initialState));\n    this.score = 0;\n    this.status = 'idle';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const { row, col } =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  move(direction) {\n    const originalBoard = JSON.parse(JSON.stringify(this.board));\n\n    switch (direction) {\n      case 'left':\n        this.board = this.moveLeftHelper(this.board);\n        break;\n      case 'right':\n        this.board = this.moveRightHelper(this.board);\n        break;\n      case 'up':\n        this.board = this.moveUpHelper(this.board);\n        break;\n      case 'down':\n        this.board = this.moveDownHelper(this.board);\n        break;\n      default:\n        return;\n    }\n\n    // Check if board has changed\n    if (JSON.stringify(originalBoard) !== JSON.stringify(this.board)) {\n      this.addRandomTile();\n\n      if (this.checkWin()) {\n        this.status = 'win';\n      } else if (this.checkGameOver()) {\n        this.status = 'lose';\n      }\n    }\n  }\n\n  moveLeftHelper(board) {\n    return board.map((row) => this.slideTiles(row));\n  }\n\n  moveRightHelper(board) {\n    return board.map((row) => this.slideTiles(row.reverse()).reverse());\n  }\n\n  moveUpHelper(board) {\n    const rotatedBoard = this.rotateBoard(board);\n    const movedBoard = rotatedBoard.map((row) => this.slideTiles(row));\n\n    return this.rotateBoard(movedBoard, true);\n  }\n\n  moveDownHelper(board) {\n    const rotatedBoard = this.rotateBoard(board, true);\n    const movedBoard = rotatedBoard.map((row) => this.slideTiles(row));\n\n    return this.rotateBoard(movedBoard);\n  }\n\n  slideTiles(row) {\n    const newRow = row.filter((cell) => cell !== 0);\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        this.score += newRow[i];\n        newRow.splice(i + 1, 1);\n        newRow.push(0);\n      }\n    }\n\n    while (newRow.length < 4) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  rotateBoard(board, clockwise = false) {\n    const rotated = board.map((row, rowIndex) =>\n      row.map((val, colIndex) =>\n        clockwise\n          ? board[3 - colIndex][rowIndex]\n          : board[colIndex][3 - rowIndex],\n      ),\n    );\n\n    return rotated;\n  }\n\n  checkWin() {\n    return this.board.some((row) => row.includes(2048));\n  }\n\n  checkGameOver() {\n    const directions = ['left', 'right', 'up', 'down'];\n\n    return !directions.some((direction) => {\n      const tempGame = new Game(this.board);\n\n      tempGame.move(direction);\n\n      return JSON.stringify(tempGame.board) !== JSON.stringify(this.board);\n    });\n  }\n}\n\n// Export Game class for use in browser\nwindow.Game = Game;\n"],"names":["Game","protoProps","initialState","arguments","length","_class_call_check","instance","Constructor","TypeError","board","JSON","parse","stringify","score","status","key","value","move","addRandomTile","emptyCells","row","col","push","_emptyCells_Math_floor","Math","floor","random","row1","col1","direction","originalBoard","moveLeftHelper","moveRightHelper","moveUpHelper","moveDownHelper","checkWin","checkGameOver","_this","map","slideTiles","reverse","movedBoard","rotatedBoard","rotateBoard","newRow","filter","cell","i","splice","clockwise","rowIndex","val","colIndex","some","includes","directions","tempGame","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","window"],"version":3,"file":"index.ddeb6468.js.map"}