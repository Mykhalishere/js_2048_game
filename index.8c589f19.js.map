{"mappings":"ACKA,SAAS,gBAAgB,CAAC,mBAAoB,WAC5C,IAAM,EAAO,IAAI,KACX,EAAe,SAAS,aAAa,CAAC,eACtC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAY,SAAS,aAAa,CAAC,eAEnC,EAAc,WAKlB,IAAK,IAJC,EAAQ,EAAK,QAAQ,GACrB,EAAQ,EAAU,oBAAoB,CAAC,MACzC,EAAY,EAEP,EAAM,EAAG,EAAM,EAAM,MAAM,CAAE,IACpC,IAAK,IAAI,EAAM,EAAG,EAAM,CAAK,CAAC,EAAI,CAAC,MAAM,CAAE,IAAO,CAChD,IAAM,EAAO,CAAK,CAAC,EAAU,AAE7B,CAAA,EAAK,WAAW,CAAG,AAAoB,IAApB,CAAK,CAAC,EAAI,CAAC,EAAI,CAAS,GAAK,CAAK,CAAC,EAAI,CAAC,EAAI,CAC/D,EAAK,SAAS,CAAG,0BAA0C,MAAA,CAAhB,CAAK,CAAC,EAAI,CAAC,EAAI,EAC1D,GACF,CAEF,EAAa,WAAW,CAAG,EAAK,QAAQ,EAC1C,EAEM,EAAY,WAChB,EAAK,KAAK,GACV,IACA,EAAY,SAAS,CAAC,GAAG,CAAC,WAC1B,EAAY,SAAS,CAAC,MAAM,CAAC,SAC7B,EAAY,WAAW,CAAG,UAC1B,EAAa,SAAS,CAAC,GAAG,CAAC,UAC3B,EAAW,SAAS,CAAC,GAAG,CAAC,UACzB,EAAY,SAAS,CAAC,GAAG,CAAC,SAC5B,EAEM,EAAc,WAClB,EAAK,OAAO,GACZ,IACA,EAAW,SAAS,CAAC,GAAG,CAAC,UACzB,EAAY,SAAS,CAAC,GAAG,CAAC,SAC5B,EAiCA,EAAY,gBAAgB,CAAC,QAAS,WAElC,AAAqB,SAArB,EAAK,SAAS,IACd,AAAqB,SAArB,EAAK,SAAS,IACd,AAAqB,QAArB,EAAK,SAAS,GAEd,IAEA,GAEJ,GAEA,SAAS,gBAAgB,CAAC,UA3CJ,SAAC,CAAvB,EACE,GAAI,AAAqB,YAArB,EAAK,SAAS,IAIlB,OAAQ,EAAM,GAAG,EACf,IAAK,YACH,EAAK,QAAQ,GACb,KACF,KAAK,aACH,EAAK,SAAS,GACd,KACF,KAAK,UACH,EAAK,MAAM,GACX,KACF,KAAK,YACH,EAAK,QAAQ,GACb,KACF,SACE,MACJ,CAEA,IAEI,AAAqB,QAArB,EAAK,SAAS,GAChB,EAAW,SAAS,CAAC,MAAM,CAAC,UACE,SAArB,EAAK,SAAS,IACvB,EAAY,SAAS,CAAC,MAAM,CAAC,UAEjC,GAiBA,IAAM,EAAQ,EAAU,oBAAoB,CAAC,MAExC,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAc,CAAA,CAAA,OAAA,QAAA,CAAA,GAAd,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,GAAA,A,WAAK,IAAM,EAAN,EAAA,KAAA,CACH,EAAK,gBAAgB,CAAC,eAAgB,WACpC,EAAK,SAAS,CAAC,MAAM,CAAC,gBACxB,E,G,C,M,E,CAHG,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAKP","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["/* eslint-disable no-unused-vars */ /* eslint-disable no-undef */ /* eslint-disable no-shadow */ \"use strict\";\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var game = new Game();\n    var scoreElement = document.querySelector(\".game-score\");\n    var startButton = document.querySelector(\".button.start\");\n    var messageStart = document.querySelector(\".message-start\");\n    var messageWin = document.querySelector(\".message-win\");\n    var messageLose = document.querySelector(\".message-lose\");\n    var gameField = document.querySelector(\".game-field\");\n    var renderBoard = function() {\n        var state = game.getState();\n        var cells = gameField.getElementsByTagName(\"td\");\n        var cellIndex = 0;\n        for(var row = 0; row < state.length; row++)for(var col = 0; col < state[row].length; col++){\n            var cell = cells[cellIndex];\n            cell.textContent = state[row][col] === 0 ? \"\" : state[row][col];\n            cell.className = \"field-cell field-cell--\".concat(state[row][col]);\n            cellIndex++;\n        }\n        scoreElement.textContent = game.getScore();\n    };\n    var startGame = function() {\n        game.start();\n        renderBoard();\n        startButton.classList.add(\"restart\");\n        startButton.classList.remove(\"start\");\n        startButton.textContent = \"Restart\";\n        messageStart.classList.add(\"hidden\");\n        messageWin.classList.add(\"hidden\");\n        messageLose.classList.add(\"hidden\");\n    };\n    var restartGame = function() {\n        game.restart();\n        renderBoard();\n        messageWin.classList.add(\"hidden\");\n        messageLose.classList.add(\"hidden\");\n    };\n    var handleKeyDown = function(event) {\n        if (game.getStatus() !== \"playing\") return;\n        switch(event.key){\n            case \"ArrowLeft\":\n                game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                game.moveRight();\n                break;\n            case \"ArrowUp\":\n                game.moveUp();\n                break;\n            case \"ArrowDown\":\n                game.moveDown();\n                break;\n            default:\n                return;\n        }\n        renderBoard();\n        if (game.getStatus() === \"win\") messageWin.classList.remove(\"hidden\");\n        else if (game.getStatus() === \"lose\") messageLose.classList.remove(\"hidden\");\n    };\n    startButton.addEventListener(\"click\", function() {\n        if (game.getStatus() === \"idle\" || game.getStatus() === \"lose\" || game.getStatus() === \"win\") startGame();\n        else restartGame();\n    });\n    document.addEventListener(\"keydown\", handleKeyDown);\n    // Function to handle cell merging\n    var cells = gameField.getElementsByTagName(\"td\");\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        var _loop = function() {\n            var cell = _step.value;\n            cell.addEventListener(\"animationend\", function() {\n                cell.classList.remove(\"animate-merge\");\n            });\n        };\n        for(var _iterator = cells[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n});\n\n//# sourceMappingURL=index.8c589f19.js.map\n","/* eslint-disable no-unused-vars */\n/* eslint-disable no-undef */\n/* eslint-disable no-shadow */\n'use strict';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const game = new Game();\n  const scoreElement = document.querySelector('.game-score');\n  const startButton = document.querySelector('.button.start');\n  const messageStart = document.querySelector('.message-start');\n  const messageWin = document.querySelector('.message-win');\n  const messageLose = document.querySelector('.message-lose');\n  const gameField = document.querySelector('.game-field');\n\n  const renderBoard = () => {\n    const state = game.getState();\n    const cells = gameField.getElementsByTagName('td');\n    let cellIndex = 0;\n\n    for (let row = 0; row < state.length; row++) {\n      for (let col = 0; col < state[row].length; col++) {\n        const cell = cells[cellIndex];\n\n        cell.textContent = state[row][col] === 0 ? '' : state[row][col];\n        cell.className = `field-cell field-cell--${state[row][col]}`;\n        cellIndex++;\n      }\n    }\n    scoreElement.textContent = game.getScore();\n  };\n\n  const startGame = () => {\n    game.start();\n    renderBoard();\n    startButton.classList.add('restart');\n    startButton.classList.remove('start');\n    startButton.textContent = 'Restart';\n    messageStart.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  };\n\n  const restartGame = () => {\n    game.restart();\n    renderBoard();\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  };\n\n  const handleKeyDown = (event) => {\n    if (game.getStatus() !== 'playing') {\n      return;\n    }\n\n    switch (event.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      default:\n        return;\n    }\n\n    renderBoard();\n\n    if (game.getStatus() === 'win') {\n      messageWin.classList.remove('hidden');\n    } else if (game.getStatus() === 'lose') {\n      messageLose.classList.remove('hidden');\n    }\n  };\n\n  startButton.addEventListener('click', () => {\n    if (\n      game.getStatus() === 'idle' ||\n      game.getStatus() === 'lose' ||\n      game.getStatus() === 'win'\n    ) {\n      startGame();\n    } else {\n      restartGame();\n    }\n  });\n\n  document.addEventListener('keydown', handleKeyDown);\n\n  // Function to handle cell merging\n  const cells = gameField.getElementsByTagName('td');\n\n  for (const cell of cells) {\n    cell.addEventListener('animationend', () => {\n      cell.classList.remove('animate-merge');\n    });\n  }\n});\n"],"names":["document","addEventListener","game","Game","scoreElement","querySelector","startButton","messageStart","messageWin","messageLose","gameField","renderBoard","state","getState","cells","getElementsByTagName","cellIndex","row","length","col","cell","textContent","className","concat","getScore","startGame","start","classList","add","remove","restartGame","restart","getStatus","event","key","moveLeft","moveRight","moveUp","moveDown","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_loop","value","err","return"],"version":3,"file":"index.8c589f19.js.map"}